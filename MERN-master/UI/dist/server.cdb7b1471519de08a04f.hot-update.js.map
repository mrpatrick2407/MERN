{"version":3,"file":"server.cdb7b1471519de08a04f.hot-update.js","mappings":";;;;;;;;;;;;;;;AAAA,MAAMA,OAAO,GAAG,IAAIC,MAAM,CAAC,6BAA6B,CAAC;AACzD,SAASC,eAAeA,CAACC,GAAG,EAACC,KAAK,EAAC;EAC/B,IAAGJ,OAAO,CAACK,IAAI,CAACD,KAAK,CAAC,EAAC;IACnB,OAAO,IAAIE,IAAI,CAACF,KAAK,CAAC;EAC1B;EACA,OAAOA,KAAK;AAChB;AACO,eAAeG,eAAeA,CAACC,KAAK,EAAEC,SAAS,GAAG,CAAC,CAAC,EAACC,SAAS,GAAC,IAAI,EAAE;EACxE,IAAI;IACAC,OAAO,CAACC,GAAG,CAAC,MAAM,GAACJ,KAAK,CAAC;IAE7B,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAE,UAAU,EAAE;MACtCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAkB,CAAC;MAC9CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEX,KAAK;QAAEC;MAAU,CAAC;IAC7C,CAAC,CAAC;IACF,MAAMQ,IAAI,GAAG,MAAMJ,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClCT,OAAO,CAACC,GAAG,CAAC,MAAM,GAACK,IAAI,CAAC;IACxB,MAAMI,MAAM,GAAGH,IAAI,CAACI,KAAK,CAACL,IAAI,EAAEf,eAAe,CAAC;IAEhD,IAAImB,MAAM,CAACE,MAAM,EAAE;MACf,MAAMC,KAAK,GAAGH,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC;MAC9B,IAAIC,KAAK,CAACC,UAAU,CAACC,IAAI,IAAI,gBAAgB,EAAE;QAC/C,MAAMC,OAAO,GAAGH,KAAK,CAACC,UAAU,CAACG,SAAS,CAACL,MAAM,CAACM,IAAI,CAAC,KAAK,CAAC;QAC7D,IAAInB,SAAS,EAAEA,SAAS,CAAE,GAAEc,KAAK,CAACM,OAAQ,OAAMH,OAAQ,EAAC,CAAC;MAC1D,CAAC,MAAM;QACHjB,SAAS,CAAE,GAAEc,KAAK,CAACC,UAAU,CAACC,IAAK,KAAIF,KAAK,CAACM,OAAQ,EAAC,CAAC;MAC3D;IACJ;IACA,OAAOT,MAAM,CAACU,IAAI;EAClB,CAAC,CAAC,OAAOC,CAAC,EAAE;IACR,IAAItB,SAAS,EAAEA,SAAS,CAAE,oCAAmCsB,CAAC,CAACF,OAAQ,EAAC,CAAC;IACzE,OAAOE,CAAC;EACZ;AACJ;;;;;;;;;UClCA","sources":["webpack://por-mern0stack2-api/./src/graphqlendppoint.js","webpack://por-mern0stack2-api/webpack/runtime/getFullHash"],"sourcesContent":["const datereg = new RegExp('^\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d');\r\nfunction jsondatereviver(key,value){\r\n    if(datereg.test(value)){\r\n        return new Date(value);\r\n    }\r\n    return value\r\n}\r\nexport async function graphqlendpoint(query, variables = {},showError=null) {\r\n    try {\r\n        console.log(\"tree\"+query)\r\n       \r\n    const response = await fetch( '/graphql', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json'},\r\n        body: JSON.stringify({ query, variables })\r\n    });\r\n    const body = await response.text();\r\n    console.log(\"body\"+body);\r\n    const result = JSON.parse(body, jsondatereviver);\r\n\r\n    if (result.errors) {\r\n        const error = result.errors[0];\r\n        if (error.extensions.code == 'BAD_USER_INPUT') {\r\n        const details = error.extensions.exception.errors.join('\\n ');\r\n        if (showError) showError(`${error.message}:\\n ${details}`);\r\n        } else {\r\n            showError(`${error.extensions.code}: ${error.message}`);\r\n        }\r\n    }\r\n    return result.data;\r\n    } catch (e) {\r\n        if (showError) showError(`Error in sending data to server: ${e.message}`);\r\n        return e;\r\n    }\r\n}","__webpack_require__.h = () => (\"edb9ff6b66ef1f573d6f\")"],"names":["datereg","RegExp","jsondatereviver","key","value","test","Date","graphqlendpoint","query","variables","showError","console","log","response","fetch","method","headers","body","JSON","stringify","text","result","parse","errors","error","extensions","code","details","exception","join","message","data","e"],"sourceRoot":""}